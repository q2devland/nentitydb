--ALTER SESSION SET CURRENT_SCHEMA = "ANONYMOUS;

BEGIN
   FOR cc IN (SELECT OBJECT_NAME as TriggerExists FROM DBA_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER' AND OWNER='ANONYMOUS' AND OBJECT_NAME = 'Customers_Trg') LOOP
      EXECUTE IMMEDIATE 'DROP TRIGGER "ANONYMOUS"."Customers_Trg"';
   END LOOP;

   FOR cc IN (SELECT OBJECT_NAME as TriggerExists FROM DBA_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER' AND OWNER='ANONYMOUS' AND OBJECT_NAME = 'Users_Trg') LOOP
      EXECUTE IMMEDIATE 'DROP TRIGGER "ANONYMOUS"."Users_Trg"';
   END LOOP;

   FOR cc IN (SELECT OBJECT_NAME as TriggerExists FROM DBA_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER' AND OWNER='ANONYMOUS' AND OBJECT_NAME = 'Shapes_Trg') LOOP
      EXECUTE IMMEDIATE 'DROP TRIGGER "ANONYMOUS"."Shapes_Trg"';
   END LOOP;

   FOR cc IN (SELECT OBJECT_NAME as TriggerExists FROM DBA_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER' AND OWNER='ANONYMOUS' AND OBJECT_NAME = 'ShapesTPH_Trg') LOOP
      EXECUTE IMMEDIATE 'DROP TRIGGER "ANONYMOUS"."ShapesTPH_Trg"';
   END LOOP;

BEGIN
EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."InvoiceLines"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Invoices"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Addresses"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Customers"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Countries"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
  
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Users"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
    
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Suppliers"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
  
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Polygons"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
 
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."EllipsesKit"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
 
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Ellipses"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
 
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Circles"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
  
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Curved"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."ShapesTPH"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Shapes"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
  
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."ShapeOptions"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Employees"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
  
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Departments"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."Companies"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "ANONYMOUS"."BlackList"';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Customers" (
    "CUS_Id" NUMBER(38,0) NOT NULL,
	"CUS_FirstName" VARCHAR2(50) NOT NULL,
	"CUS_LastName" VARCHAR2(50) NOT NULL,
	"CUS_Email" VARCHAR2(50) NOT NULL,
	"CUS_TaxCode" VARCHAR2(50) NOT NULL,
	"CUS_IsActive" NUMBER(1,0) NOT NULL,
	"CUS_BirthDate" DATE NOT NULL,
	"CUS_DeathDate" DATE NULL,
	"CUS_Points" NUMBER(38,0) NOT NULL,
	"CUS_CreationDate" TIMESTAMP NOT NULL
)';

EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Customers" ADD CONSTRAINT "PK_Customers" PRIMARY KEY ("CUS_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Countries"(
	"COU_Id" NUMBER(38,0) NOT NULL,
	"COU_Name" VARCHAR2(50) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Countries" ADD CONSTRAINT "PK_Countries" PRIMARY KEY ("COU_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Countries" ADD CONSTRAINT "UQ_Countries_Name" UNIQUE ("COU_Name")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Addresses" (
    "ADR_Id" NUMBER(38,0) NOT NULL,
	"ADR_Street" VARCHAR2(50) NOT NULL,
	"ADR_PostalCode" VARCHAR2(50) NULL,
	"ADR_City" VARCHAR2(50) NOT NULL,
	"ADR_IsMain" NUMBER(3) NOT NULL,
	"COU_Id" NUMBER(38,0) NOT NULL,
	"CUS_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Addresses" ADD CONSTRAINT "PK_Addresses" PRIMARY KEY ("ADR_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Addresses" ADD CONSTRAINT "FK_Addresses_Customers" FOREIGN KEY ("CUS_Id") REFERENCES "ANONYMOUS"."Customers" ("CUS_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Addresses" ADD CONSTRAINT "FK_Addresses_Countries" FOREIGN KEY ("COU_Id") REFERENCES "ANONYMOUS"."Countries" ("COU_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Invoices" (
    "INV_Id" NUMBER(38,0) NOT NULL,
	"INV_Number" VARCHAR2(50) NOT NULL,
	"INV_Date" DATE NOT NULL,
	"INV_IsPaid" NUMBER(3) NOT NULL,
	"CUS_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Invoices" ADD CONSTRAINT "PK_Invoices" PRIMARY KEY ("INV_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Invoices" ADD CONSTRAINT "FK_Invoices_Customers" FOREIGN KEY ("CUS_Id") REFERENCES "ANONYMOUS"."Customers" ("CUS_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."InvoiceLines" (
    "ILI_Id" NUMBER(38,0) NOT NULL,
	"ILI_Concept" VARCHAR2(50) NOT NULL,
	"ILI_Amount" NUMBER(19,4) NOT NULL,
	"INV_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."InvoiceLines" ADD CONSTRAINT "PK_InvoiceLines" PRIMARY KEY ("ILI_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."InvoiceLines" ADD CONSTRAINT "FK_InvoiceLines_Invoices" FOREIGN KEY ("INV_Id") REFERENCES "ANONYMOUS"."Invoices" ("INV_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Users" (
    "USR_Id" NUMBER(38,0) NOT NULL,
	"USR_FullName" VARCHAR2(50) NOT NULL,
	"USR_Username" VARCHAR2(50) NOT NULL,
	"USR_Settings" VARCHAR(1000) NULL,
    "USR_IsActive" CHAR(1) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Users" ADD CONSTRAINT "PK_Users" PRIMARY KEY ("USR_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Suppliers" (
    "SUP_Id" NUMBER(38,0) NOT NULL,
	"SUP_Name" VARCHAR2(50) NOT NULL,
	"SUP_Email" VARCHAR2(50) NOT NULL,
	"SUP_TaxCode" VARCHAR2(50) NOT NULL    
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Suppliers" ADD CONSTRAINT "PK_Suppliers" PRIMARY KEY ("SUP_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."ShapeOptions" (
    "SHO_Id" NUMBER(38,0) NOT NULL,
	"SHO_BackgroundColor" VARCHAR2(50) NOT NULL,
	"SHO_OutlineColor" VARCHAR2(50) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."ShapeOptions" ADD CONSTRAINT "PK_ShapeOptions" PRIMARY KEY ("SHO_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Shapes" (
    "SHA_Id" NUMBER(38,0) NOT NULL,
	"SHA_Name" VARCHAR2(50) NOT NULL,
	"SHO_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Shapes" ADD CONSTRAINT "PK_Shapes" PRIMARY KEY ("SHA_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Shapes" ADD CONSTRAINT "FK_Shapes_ShapeOptions" FOREIGN KEY ("SHO_Id") REFERENCES "ANONYMOUS"."ShapeOptions" ("SHO_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Polygons" (
    "POL_Id" NUMBER(38,0) NOT NULL,
	"POL_Angle" NUMBER(18,2) NOT NULL,
	"POL_Length" NUMBER(18,2) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Polygons" ADD CONSTRAINT "PK_Polygons" PRIMARY KEY ("POL_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Polygons" ADD CONSTRAINT "FK_Polygons_Shapes" FOREIGN KEY ("POL_Id") REFERENCES "ANONYMOUS"."Shapes" ("SHA_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Curved" (
    "CUR_Id" NUMBER(38,0) NOT NULL,
	"CUR_Radius" NUMBER(18,2) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Curved" ADD CONSTRAINT "PK_Curved" PRIMARY KEY ("CUR_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Curved" ADD CONSTRAINT "FK_Curved_Shapes" FOREIGN KEY ("CUR_Id") REFERENCES "ANONYMOUS"."Shapes" ("SHA_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Circles" (
    "CIR_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Circles" ADD CONSTRAINT "PK_Circles" PRIMARY KEY ("CIR_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Circles" ADD CONSTRAINT "FK_Circles_Curved" FOREIGN KEY ("CIR_Id") REFERENCES "ANONYMOUS"."Curved" ("CUR_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Ellipses" (
    "ELL_Id" NUMBER(38,0) NOT NULL,
	"ELL_Radius2" NUMBER(18,2) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Ellipses" ADD CONSTRAINT "PK_Ellipses" PRIMARY KEY ("ELL_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Ellipses" ADD CONSTRAINT "FK_Ellipses_Curved" FOREIGN KEY ("ELL_Id") REFERENCES "ANONYMOUS"."Curved" ("CUR_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."EllipsesKit" (
    "ELK_Id" NUMBER(38,0) NOT NULL,
    "ELK_Name" VARCHAR2(50) NOT NULL,
	"ELL_Id1" NUMBER(38,0) NOT NULL,
    "ELL_Id2" NUMBER(38,0) NOT NULL,
    "ELL_Id3" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."EllipsesKit" ADD CONSTRAINT "PK_EllipsesKit" PRIMARY KEY ("ELK_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses1" FOREIGN KEY ("ELL_Id1") REFERENCES "ANONYMOUS"."Ellipses" ("ELL_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses2" FOREIGN KEY ("ELL_Id2") REFERENCES "ANONYMOUS"."Ellipses" ("ELL_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses3" FOREIGN KEY ("ELL_Id3") REFERENCES "ANONYMOUS"."Ellipses" ("ELL_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."ShapesTPH" (
    "SHA_Id" NUMBER(38,0) NOT NULL,
	"SHA_Name" VARCHAR2(50) NOT NULL,
    "SHA_Type" VARCHAR2(50) NOT NULL,
    "SHA_Angle" NUMBER(18,2) NULL,
	"SHA_Length" NUMBER(18,2) NULL,
    "SHA_Radius" NUMBER(18,2) NULL,
    "SHA_Radius2" NUMBER(18,2) NULL,
	"SHO_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."ShapesTPH" ADD CONSTRAINT "PK_ShapesTPH" PRIMARY KEY ("SHA_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."ShapesTPH" ADD CONSTRAINT "FK_ShapesTPH_ShapeOptions" FOREIGN KEY ("SHO_Id") REFERENCES "ANONYMOUS"."ShapeOptions" ("SHO_Id")';


EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Companies" (
    "COM_Id" VARCHAR(36) NOT NULL,
	"COM_Name" VARCHAR2(50) NOT NULL,
    "COM_Logo" BLOB NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Companies" ADD CONSTRAINT "PK_Companies" PRIMARY KEY ("COM_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Companies" ADD CONSTRAINT "UQ_Companies_Name" UNIQUE ("COM_Name")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Departments" (
    "DEP_Id" NUMBER(38,0) NOT NULL,
	"DEP_Name" VARCHAR2(50) NOT NULL,
    "COM_Id" VARCHAR(36) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Departments" ADD CONSTRAINT "PK_Departments" PRIMARY KEY ("DEP_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Departments" ADD CONSTRAINT "UQ_Departments_Name" UNIQUE ("DEP_Name")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Departments" ADD CONSTRAINT "FK_Departments_Companies" FOREIGN KEY ("COM_Id") REFERENCES "ANONYMOUS"."Companies" ("COM_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."Employees" (
    "EMP_Id" NUMBER(38,0) NOT NULL,
	"EMP_FullName" VARCHAR2(50) NOT NULL,
    "EMP_Email" VARCHAR2(50) NOT NULL,
    "EMP_PhoneNumber" VARCHAR2(50) NOT NULL,
    "DEP_Id" NUMBER(38,0) NOT NULL
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Employees" ADD CONSTRAINT "PK_Employees" PRIMARY KEY ("EMP_Id")';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."Employees" ADD CONSTRAINT "FK_Employees_Departments" FOREIGN KEY ("DEP_Id") REFERENCES "ANONYMOUS"."Departments" ("DEP_Id")';

EXECUTE IMMEDIATE 'CREATE TABLE "ANONYMOUS"."BlackList" (
    "BLL_Year" NUMBER(38,0) NOT NULL,
    "BLL_Email" VARCHAR2(50) NOT NULL,
    "BLL_Amount" NUMBER(19,4) NOT NULL    
)';
EXECUTE IMMEDIATE 'ALTER TABLE "ANONYMOUS"."BlackList" ADD CONSTRAINT "PK_BlackList" PRIMARY KEY ("BLL_Year", "BLL_Email")';

END;

--BLOCK
CREATE OR REPLACE FUNCTION "ANONYMOUS"."df_GetAge" 
(
  "birthDate" IN DATE, 
  "deathDate" IN DATE
) RETURN NUMBER AS
    "age" NUMBER;
BEGIN
    IF "birthDate" is null THEN
        RETURN NULL;
    END IF;
    
    "age":= floor(months_between(COALESCE("deathDate", TRUNC(sysdate)), "birthDate")/12);    
    RETURN "age";
END "df_GetAge";

--BLOCK
CREATE OR REPLACE PROCEDURE "ANONYMOUS"."sp_AddSupplier" ("name" IN VARCHAR2, "taxCode" IN VARCHAR2, "email" IN VARCHAR2) AS 
BEGIN
  INSERT INTO "ANONYMOUS"."Suppliers" ("SUP_Id", "SUP_Name", "SUP_Email", "SUP_TaxCode") VALUES ("ANONYMOUS"."Suppliers_Seq".nextval, "name", "taxCode", "email");
END "sp_AddSupplier";


--BLOCK
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ANONYMOUS"."sp_GetInvoices" ("pageNumber" IN NUMBER, "pageSize" IN NUMBER, "CUR" OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN "CUR" FOR SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" as "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
	FROM "ANONYMOUS"."Invoices" "i"
		INNER JOIN "ANONYMOUS"."Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
	ORDER BY "i"."CUS_Id"	
    OFFSET (("pageNumber" - 1) * "pageSize") ROWS FETCH NEXT "pageSize" ROWS ONLY;    
END "sp_GetInvoices";

--BLOCK
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ANONYMOUS"."sp_GetCountAddresses" ("pageNumber" IN NUMBER, "pageSize" IN NUMBER, "CUR" OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN "CUR" FOR 	SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
	FROM "ANONYMOUS"."Addresses" "a"
		INNER JOIN "ANONYMOUS"."Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
	GROUP BY "a"."CUS_Id", "c"."CUS_Email"
	ORDER BY "a"."CUS_Id"
    OFFSET (("pageNumber" - 1) * "pageSize") ROWS FETCH NEXT "pageSize" ROWS ONLY;    
END "sp_GetCountAddresses";

--BLOCK
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ANONYMOUS"."sp_GetInvoice" ("id" IN NUMBER, "CUR" OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN "CUR" FOR SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" as "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
	FROM "ANONYMOUS"."Invoices" "i"
		INNER JOIN "ANONYMOUS"."Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
	WHERE "INV_Id" = "id";
END "sp_GetInvoice";

--BLOCK
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ANONYMOUS"."sp_GetCountAddress" ("id" IN NUMBER, "CUR" OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN "CUR" FOR SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
	FROM "ANONYMOUS"."Addresses" "a"
		INNER JOIN "ANONYMOUS"."Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
	WHERE "a"."CUS_Id" = "id"
	GROUP BY "a"."CUS_Id", "c"."CUS_Email";
END "sp_GetCountAddress";

--BLOCK
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ANONYMOUS"."sp_GetInvoicesAmount" ("CUR" OUT SYS_REFCURSOR) AS 
BEGIN
	OPEN "CUR" FOR 	SELECT SUM("ILI_Amount")
	FROM "ANONYMOUS"."InvoiceLines";
END "sp_GetInvoicesAmount";


--BLOCK
BEGIN
   FOR cc IN (SELECT sequence_name as sequence_exists
                FROM all_sequences
               WHERE sequence_owner = 'ANONYMOUS'
                 AND sequence_name = 'Customers_Seq') LOOP
      EXECUTE IMMEDIATE 'DROP SEQUENCE "ANONYMOUS"."Customers_Seq"';
   END LOOP;

   FOR cc IN (SELECT sequence_name as sequence_exists
                FROM all_sequences
               WHERE sequence_owner = 'ANONYMOUS'
                 AND sequence_name = 'Users_Seq') LOOP
      EXECUTE IMMEDIATE 'DROP SEQUENCE "ANONYMOUS"."Users_Seq"';
   END LOOP;

   FOR cc IN (SELECT sequence_name as sequence_exists
                FROM all_sequences
               WHERE sequence_owner = 'ANONYMOUS'
                 AND sequence_name = 'Suppliers_Seq') LOOP
      EXECUTE IMMEDIATE 'DROP SEQUENCE "ANONYMOUS"."Suppliers_Seq"';
   END LOOP;

   FOR cc IN (SELECT sequence_name as sequence_exists
                FROM all_sequences
               WHERE sequence_owner = 'ANONYMOUS'
                 AND sequence_name = 'Shapes_Seq') LOOP
      EXECUTE IMMEDIATE 'DROP SEQUENCE "ANONYMOUS"."Shapes_Seq"';
   END LOOP;

   FOR cc IN (SELECT sequence_name as sequence_exists
                FROM all_sequences
               WHERE sequence_owner = 'ANONYMOUS'
                 AND sequence_name = 'ShapesTPH_Seq') LOOP
      EXECUTE IMMEDIATE 'DROP SEQUENCE "ANONYMOUS"."ShapesTPH_Seq"';
   END LOOP;

END;

--BLOCK
BEGIN
	EXECUTE IMMEDIATE 'CREATE SEQUENCE "ANONYMOUS"."Customers_Seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL';
	EXECUTE IMMEDIATE 'CREATE SEQUENCE "ANONYMOUS"."Users_Seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL';
	EXECUTE IMMEDIATE 'CREATE SEQUENCE "ANONYMOUS"."Suppliers_Seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL';
	EXECUTE IMMEDIATE 'CREATE SEQUENCE "ANONYMOUS"."Shapes_Seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL';
	EXECUTE IMMEDIATE 'CREATE SEQUENCE "ANONYMOUS"."ShapesTPH_Seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL';
END;


--BLOCK
CREATE OR REPLACE NONEDITIONABLE TRIGGER "ANONYMOUS"."Customers_Trg" 
BEFORE INSERT ON "ANONYMOUS"."Customers" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW."CUS_Id" IS NULL THEN
      SELECT "Customers_Seq".nextval INTO :NEW."CUS_Id" FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

--BLOCK
CREATE OR REPLACE NONEDITIONABLE TRIGGER "ANONYMOUS"."Users_Trg" 
BEFORE INSERT ON "ANONYMOUS"."Users" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW."USR_Id" IS NULL THEN
      SELECT "Users_Seq".nextval INTO :NEW."USR_Id" FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

--BLOCK
CREATE OR REPLACE NONEDITIONABLE TRIGGER "ANONYMOUS"."Shapes_Trg" 
BEFORE INSERT ON "ANONYMOUS"."Shapes" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW."SHA_Id" IS NULL THEN
      SELECT "Shapes_Seq".nextval INTO :NEW."SHA_Id" FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

--BLOCK
CREATE OR REPLACE NONEDITIONABLE TRIGGER "ANONYMOUS"."ShapesTPH_Trg" 
BEFORE INSERT ON "ANONYMOUS"."ShapesTPH" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW."SHA_Id" IS NULL THEN
      SELECT "ShapesTPH_Seq".nextval INTO :NEW."SHA_Id" FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

--BLOCK
BEGIN
	EXECUTE IMMEDIATE 'ALTER TRIGGER "ANONYMOUS"."Customers_Trg" ENABLE';
	EXECUTE IMMEDIATE 'ALTER TRIGGER "ANONYMOUS"."Users_Trg" ENABLE';
	EXECUTE IMMEDIATE 'ALTER TRIGGER "ANONYMOUS"."Shapes_Trg" ENABLE';
	EXECUTE IMMEDIATE 'ALTER TRIGGER "ANONYMOUS"."ShapesTPH_Trg" ENABLE';
END;





