CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_DropTable"(IN schemaName VARCHAR(50), IN tableName VARCHAR(50)) 
BEGIN 
	DECLARE stmt VARCHAR(100); 
	IF EXISTS(SELECT * FROM sysibm.systables WHERE name = tableName AND creator = schemaName) THEN 
		SET stmt = 'DROP TABLE "' || schemaName || '"."' || tableName || '"'; 
		EXECUTE IMMEDIATE stmt; 
	END IF;
	RETURN; 
END

--BLOCK
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Employees');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Departments');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Companies');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Addresses');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Countries');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'InvoiceLines');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Invoices');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Customers');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Suppliers');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Users');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'EllipsesKit');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Polygons');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Ellipses');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Circles');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Curved');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'Shapes');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'ShapesTPH');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'ShapeOptions');
CALL "DB2INST1"."sp_DropTable"('DB2INST1', 'BlackList');


CREATE TABLE "DB2INST1"."Customers" (
	"CUS_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"CUS_FirstName" VARCHAR(50) NOT NULL,
	"CUS_LastName" VARCHAR(50) NOT NULL,
	"CUS_Email" VARCHAR(50) NOT NULL,
	"CUS_TaxCode" VARCHAR(50) NOT NULL,
	"CUS_IsActive" BOOLEAN NOT NULL,
	"CUS_BirthDate" DATE NOT NULL,
	"CUS_DeathDate" DATE NULL,
	"CUS_Points" INT NOT NULL,
	"CUS_CreationDate" TIMESTAMP NOT NULL
); 
ALTER TABLE "DB2INST1"."Customers" ADD CONSTRAINT "PK_Customers" PRIMARY KEY ("CUS_Id");

CREATE TABLE "DB2INST1"."Countries"(
	"COU_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"COU_Name" VARCHAR(50) NOT NULL
);
ALTER TABLE "DB2INST1"."Countries" ADD CONSTRAINT "PK_Countries" PRIMARY KEY ("COU_Id");
ALTER TABLE "DB2INST1"."Countries" ADD CONSTRAINT "UK_Countries_Name" UNIQUE("COU_Name");

CREATE TABLE "DB2INST1"."Addresses"(
	"ADR_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"ADR_Street" VARCHAR(50) NOT NULL,
	"ADR_PostalCode" VARCHAR(50) NULL,
	"ADR_City" VARCHAR(50) NOT NULL,
	"ADR_IsMain" BOOLEAN NOT NULL,
	"COU_Id" INT NOT NULL,
	"CUS_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."Addresses" ADD CONSTRAINT "PK_Addresses" PRIMARY KEY ("ADR_Id");
ALTER TABLE "DB2INST1"."Addresses" ADD CONSTRAINT "FK_Addresses_Countries" FOREIGN KEY ("COU_Id") REFERENCES "DB2INST1"."Countries" ("COU_Id");
ALTER TABLE "DB2INST1"."Addresses" ADD CONSTRAINT "FK_Addresses_Customers" FOREIGN KEY ("CUS_Id") REFERENCES "DB2INST1"."Customers" ("CUS_Id");


CREATE TABLE "DB2INST1"."Invoices"(
	"INV_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"INV_Number" VARCHAR(50) NOT NULL,
	"INV_Date" DATE NOT NULL,
	"INV_IsPaid" BOOLEAN NOT NULL,
	"CUS_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."Invoices" ADD CONSTRAINT "PK_Invoices" PRIMARY KEY ("INV_Id");
ALTER TABLE "DB2INST1"."Invoices" ADD CONSTRAINT "FK_Invoices_Customers" FOREIGN KEY ("CUS_Id") REFERENCES "DB2INST1"."Customers" ("CUS_Id");


CREATE TABLE "DB2INST1"."InvoiceLines"(
	"ILI_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"ILI_Concept" VARCHAR(50) NOT NULL,
	"ILI_Amount" DECIMAL NOT NULL,
	"INV_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."InvoiceLines" ADD CONSTRAINT "PK_InvoiceLines" PRIMARY KEY ("ILI_Id");
ALTER TABLE "DB2INST1"."InvoiceLines" ADD CONSTRAINT "FK_InvoiceLines_Invoices" FOREIGN KEY ("INV_Id") REFERENCES "DB2INST1"."Invoices" ("INV_Id");


CREATE TABLE "DB2INST1"."Users"(
	"USR_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"USR_FullName" VARCHAR(50) NOT NULL,
	"USR_Username" VARCHAR(50) NOT NULL,
	"USR_Settings" VARCHAR(8000) NULL,
	"USR_IsActive" CHAR(1) NOT NULL
);
ALTER TABLE "DB2INST1"."Users" ADD CONSTRAINT "PK_Users" PRIMARY KEY ("USR_Id");


CREATE TABLE "DB2INST1"."Suppliers"(
	"SUP_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"SUP_Name" VARCHAR(50) NOT NULL,
	"SUP_Email" VARCHAR(50) NOT NULL,
	"SUP_TaxCode" VARCHAR(50) NOT NULL
);
ALTER TABLE "DB2INST1"."Suppliers" ADD CONSTRAINT "PK_Suppliers" PRIMARY KEY ("SUP_Id");


CREATE TABLE "DB2INST1"."ShapeOptions"(
	"SHO_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"SHO_BackgroundColor" VARCHAR(50) NOT NULL,
	"SHO_OutlineColor" VARCHAR(50) NOT NULL
);
ALTER TABLE "DB2INST1"."ShapeOptions" ADD CONSTRAINT "PK_ShapeOptions" PRIMARY KEY ("SHO_Id");


CREATE TABLE "DB2INST1"."Shapes"(
	"SHA_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"SHA_Name" VARCHAR(50) NOT NULL,
	"SHO_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."Shapes" ADD CONSTRAINT "PK_Shapes" PRIMARY KEY ("SHA_Id");
ALTER TABLE "DB2INST1"."Shapes" ADD CONSTRAINT "FK_Shapes_ShapesOptions" FOREIGN KEY("SHO_Id") REFERENCES "DB2INST1"."ShapeOptions" ("SHO_Id");


CREATE TABLE "DB2INST1"."Polygons"(
	"POL_Id" INT NOT NULL,
	"POL_Angle" DECIMAL NOT NULL,
	"POL_Length" DECIMAL NOT NULL
);
ALTER TABLE "DB2INST1"."Polygons" ADD CONSTRAINT "PK_Polygons" PRIMARY KEY ("POL_Id");
ALTER TABLE "DB2INST1"."Polygons" ADD CONSTRAINT "FK_Polygons_Shapes" FOREIGN KEY("POL_Id") REFERENCES "DB2INST1"."Shapes" ("SHA_Id");


CREATE TABLE "DB2INST1"."Curved"(
	"CUR_Id" INT NOT NULL,
	"CUR_Radius" DECIMAL NOT NULL
);
ALTER TABLE "DB2INST1"."Curved" ADD CONSTRAINT "PK_Curved" PRIMARY KEY ("CUR_Id");
ALTER TABLE "DB2INST1"."Curved" ADD CONSTRAINT "FK_Curved_Shapes" FOREIGN KEY("CUR_Id") REFERENCES "DB2INST1"."Shapes" ("SHA_Id");

CREATE TABLE "DB2INST1"."Circles"(
	"CIR_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."Circles" ADD CONSTRAINT "PK_Circles" PRIMARY KEY ("CIR_Id");
ALTER TABLE "DB2INST1"."Circles" ADD CONSTRAINT "FK_Circles_Curved" FOREIGN KEY("CIR_Id") REFERENCES "DB2INST1"."Curved" ("CUR_Id");

CREATE TABLE "DB2INST1"."Ellipses"(
	"ELL_Id" INT NOT NULL,
	"ELL_Radius2" DECIMAL NOT NULL
);
ALTER TABLE "DB2INST1"."Ellipses" ADD CONSTRAINT "PK_Ellipses" PRIMARY KEY ("ELL_Id");
ALTER TABLE "DB2INST1"."Ellipses" ADD CONSTRAINT "FK_Ellipses_Curved" FOREIGN KEY("ELL_Id") REFERENCES "DB2INST1"."Curved" ("CUR_Id");

CREATE TABLE "DB2INST1"."EllipsesKit"(
	"ELK_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"ELK_Name" VARCHAR(50) NOT NULL,
	"ELL_Id1" INT NOT NULL,
	"ELL_Id2" INT NOT NULL,
	"ELL_Id3" INT NOT NULL
);
ALTER TABLE "DB2INST1"."EllipsesKit" ADD CONSTRAINT "PK_EllipsesKit" PRIMARY KEY ("ELK_Id");
ALTER TABLE "DB2INST1"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses1" FOREIGN KEY("ELL_Id1") REFERENCES "DB2INST1"."Ellipses" ("ELL_Id");
ALTER TABLE "DB2INST1"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses2" FOREIGN KEY("ELL_Id2") REFERENCES "DB2INST1"."Ellipses" ("ELL_Id");
ALTER TABLE "DB2INST1"."EllipsesKit" ADD CONSTRAINT "FK_EllipsesKit_Ellipses3" FOREIGN KEY("ELL_Id3") REFERENCES "DB2INST1"."Ellipses" ("ELL_Id");

CREATE TABLE "DB2INST1"."ShapesTPH"(
	"SHA_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"SHA_Name" VARCHAR(50) NOT NULL,
	"SHA_Type" VARCHAR(50) NOT NULL,
	"SHA_Angle" DECIMAL NULL,
	"SHA_Length" DECIMAL NULL,
	"SHA_Radius" DECIMAL NULL,
	"SHA_Radius2" DECIMAL NULL,
	"SHO_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."ShapesTPH" ADD CONSTRAINT "PK_ShapesTPH" PRIMARY KEY ("SHA_Id");
ALTER TABLE "DB2INST1"."ShapesTPH" ADD CONSTRAINT "FK_ShapesTPH_ShapesOptions" FOREIGN KEY("SHO_Id") REFERENCES "DB2INST1"."ShapeOptions" ("SHO_Id");


CREATE TABLE "DB2INST1"."Companies"(
	"COM_Id" VARCHAR(36) NOT NULL,
	"COM_Name" VARCHAR(50) NOT NULL,
	"COM_Logo" BLOB NULL
);
ALTER TABLE "DB2INST1"."Companies" ADD CONSTRAINT "PK_Companies" PRIMARY KEY ("COM_Id");
ALTER TABLE "DB2INST1"."Companies" ADD CONSTRAINT "UK_Companies_Name" UNIQUE("COM_Name");

CREATE TABLE "DB2INST1"."Departments"(
	"DEP_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"DEP_Name" VARCHAR(50) NOT NULL,
	"COM_Id" VARCHAR(36) NOT NULL
);
ALTER TABLE "DB2INST1"."Departments" ADD CONSTRAINT "PK_Departments" PRIMARY KEY ("DEP_Id");
ALTER TABLE "DB2INST1"."Departments" ADD CONSTRAINT "UK_Departments_Name" UNIQUE("DEP_Name");
ALTER TABLE "DB2INST1"."Companies" ADD CONSTRAINT "FK_Departments_Companies" FOREIGN KEY("COM_Id") REFERENCES "DB2INST1"."Companies" ("COM_Id");

CREATE TABLE "DB2INST1"."Employees"(
	"EMP_Id" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"EMP_FullName" VARCHAR(50) NOT NULL,
	"EMP_Email" VARCHAR(50) NOT NULL,
	"EMP_PhoneNumber" VARCHAR(50) NOT NULL,
	"DEP_Id" INT NOT NULL
);
ALTER TABLE "DB2INST1"."Employees" ADD CONSTRAINT "PK_Employees" PRIMARY KEY ("EMP_Id");
ALTER TABLE "DB2INST1"."Employees" ADD CONSTRAINT "FK_Employees_Departments" FOREIGN KEY("DEP_Id") REFERENCES "DB2INST1"."Departments" ("DEP_Id");

CREATE TABLE "DB2INST1"."BlackList"(
	"BLL_Year" INT NOT NULL,
	"BLL_Email" VARCHAR(50) NOT NULL,
	"BLL_Amount" DECIMAL NOT NULL
);

ALTER TABLE "DB2INST1"."BlackList" ADD CONSTRAINT "PK_BlackList" PRIMARY KEY ("BLL_Year", "BLL_Email");


CREATE OR REPLACE FUNCTION "DB2INST1"."df_GetAge"(birthDate DATE, deathDate DATE)
    RETURNS INT
    DETERMINISTIC
    NO EXTERNAL ACTION
    RETURN YEAR(COALESCE(deathDate, CURRENT DATE) - birthDate);


CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_AddSupplier"(IN name VARCHAR(50), IN taxCode VARCHAR(50), IN email VARCHAR(50))
    LANGUAGE SQL
    INSERT INTO "DB2INST1"."Suppliers" ("SUP_Name", "SUP_Email", "SUP_TaxCode") VALUES (name, taxCode, email);

--BLOCK
CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_GetInvoices"(IN pageNumber INT, IN pageSize INT) 
	DYNAMIC RESULT SETS 1 
	BEGIN 
		DECLARE cursor1 CURSOR WITH RETURN FOR 
		SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" AS "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
		FROM "DB2INST1"."Invoices" "i" 
			INNER JOIN "DB2INST1"."Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
		ORDER BY "i"."CUS_Id" DESC 
		LIMIT pageSize OFFSET((pageNumber - 1) * pageSize); 
		
		OPEN cursor1; 
	END

--BLOCK
CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_GetCountAddresses"(IN pageNumber INT, IN pageSize INT) 
	DYNAMIC RESULT SETS 1 
	BEGIN 
		DECLARE cursor1 CURSOR WITH RETURN FOR 
		SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
		FROM "DB2INST1"."Addresses" "a"
			INNER JOIN "DB2INST1"."Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
		GROUP BY "a"."CUS_Id", "c"."CUS_Email"
		ORDER BY "a"."CUS_Id"
		LIMIT pageSize OFFSET((pageNumber - 1) * pageSize); 
		
		OPEN cursor1; 
	END

--BLOCK
CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_GetInvoice"(IN id INT) 
	DYNAMIC RESULT SETS 1 
	BEGIN 
		DECLARE cursor1 CURSOR WITH RETURN FOR 
		SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" AS "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
		FROM "DB2INST1"."Invoices" "i" 
			INNER JOIN "DB2INST1"."Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
		WHERE "INV_Id" = id;
		
		OPEN cursor1; 
	END

	--BLOCK
CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_GetCountAddress"(IN id INT) 
	DYNAMIC RESULT SETS 1 
	BEGIN 
		DECLARE cursor1 CURSOR WITH RETURN FOR 
		SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
		FROM "DB2INST1"."Addresses" "a"
			INNER JOIN "DB2INST1"."Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
		WHERE "a"."CUS_Id" = id
		GROUP BY "a"."CUS_Id", "c"."CUS_Email";	
		
		OPEN cursor1; 
	END

--BLOCK
CREATE OR REPLACE PROCEDURE "DB2INST1"."sp_GetInvoicesAmount"() 
	DYNAMIC RESULT SETS 1 
	BEGIN 
		DECLARE cursor1 CURSOR WITH RETURN FOR 
		SELECT SUM("ILI_Amount") AS "Amount"
		FROM "DB2INST1"."InvoiceLines";
		
		OPEN cursor1; 
	END
