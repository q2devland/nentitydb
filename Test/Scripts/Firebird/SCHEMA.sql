EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_AddSupplier')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_AddSupplier"';
END
--BLOCK
EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_GetInvoices')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_GetInvoices"';
END
--BLOCK
EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_GetCountAddresses')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_GetCountAddresses"';
END
--BLOCK
EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_GetInvoice')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_GetInvoice"';
END
--BLOCK
EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_GetCountAddress')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_GetCountAddress"';
END
--BLOCK
EXECUTE BLOCK AS BEGIN
	IF (EXISTS(SELECT 1 from RDB$PROCEDURES WHERE rdb$Procedure_name = 'sp_GetInvoicesAmount')) THEN
		EXECUTE STATEMENT 'DROP PROCEDURE "sp_GetInvoicesAmount"';
END


--BLOCK
RECREATE TABLE "Addresses"(
	"ADR_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, 
	"ADR_Street" VARCHAR(50) NOT NULL,
	"ADR_PostalCode" VARCHAR(50),
	"ADR_City" VARCHAR(50) NOT NULL,
	"ADR_IsMain" BOOLEAN NOT NULL,
	"COU_Id" INTEGER NOT NULL,
	"CUS_Id" INTEGER NOT NULL);

--BLOCK
ALTER TABLE "Addresses" ADD CONSTRAINT "PK_Addresses" PRIMARY KEY ("ADR_Id");

--BLOCK
RECREATE TABLE "Countries" (
	"COU_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"COU_Name" VARCHAR(50) NOT NULL);

--BLOCK
ALTER TABLE "Countries" ADD CONSTRAINT "PK_Countries" PRIMARY KEY ("COU_Id");
--BLOCK
ALTER TABLE "Countries" ADD CONSTRAINT "UQ_Countries_Name" UNIQUE ("COU_Name");

--BLOCK
RECREATE TABLE "InvoiceLines"(
	"ILI_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"ILI_Concept" VARCHAR(50) NOT NULL,
	"ILI_Amount" NUMERIC(18,4) NOT NULL,
	"INV_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "InvoiceLines" ADD CONSTRAINT "PK_InvoiceLines" PRIMARY KEY ("ILI_Id");

--BLOCK
RECREATE TABLE "Invoices"(
	"INV_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"INV_Number" VARCHAR(50) NOT NULL,
	"INV_Date" DATE NOT NULL,
	"INV_IsPaid" BOOLEAN NOT NULL,
	"CUS_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "Invoices" ADD CONSTRAINT "PK_Invoices" PRIMARY KEY ("INV_Id");


--BLOCK
RECREATE TABLE "Customers" (
  "CUS_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
  "CUS_FirstName" VARCHAR(50) NOT NULL,
  "CUS_LastName" VARCHAR(50) NOT NULL,
  "CUS_Email" VARCHAR(50) NOT NULL,
  "CUS_TaxCode" VARCHAR(50) NOT NULL,
  "CUS_IsActive" BOOLEAN NOT NULL,
  "CUS_BirthDate" DATE NOT NULL,
  "CUS_DeathDate" DATE,
  "CUS_Points" INTEGER NOT NULL,
  "CUS_CreationDate" TIMESTAMP NOT NULL);

--BLOCK
ALTER TABLE "Customers" ADD CONSTRAINT "PK_Customers" PRIMARY KEY ("CUS_Id");

--BLOCK
RECREATE TABLE "Users"(
	"USR_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"USR_FullName" VARCHAR(50) NOT NULL,
	"USR_Username" VARCHAR(50) NOT NULL,
	"USR_Settings" VARCHAR(5000),
	"USR_IsActive" CHAR(1) NOT NULL
);

--BLOCK
ALTER TABLE "Users" ADD CONSTRAINT "PK_Users" PRIMARY KEY ("USR_Id");

--BLOCK
RECREATE TABLE "Suppliers"(
	"SUP_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"SUP_Name" VARCHAR(50) NOT NULL,
	"SUP_Email" VARCHAR(50) NOT NULL,
	"SUP_TaxCode" VARCHAR(50) NOT NULL
);

--BLOCK
ALTER TABLE "Suppliers" ADD CONSTRAINT "PK_Suppliers" PRIMARY KEY ("SUP_Id");

--BLOCK
RECREATE TABLE "EllipsesKit"(
	"ELK_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"ELK_Name" VARCHAR(50) NOT NULL,
	"ELL_Id1" INTEGER NOT NULL,
	"ELL_Id2" INTEGER NOT NULL,
	"ELL_Id3" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "EllipsesKit" ADD CONSTRAINT "PK_EllipsesKit" PRIMARY KEY ("ELK_Id");

--BLOCK
RECREATE TABLE "Ellipses"(
	"ELL_Id" INTEGER NOT NULL,
	"ELL_Radius2" numeric(18,2) NOT NULL
);

--BLOCK
ALTER TABLE "Ellipses" ADD CONSTRAINT "PK_Ellipses" PRIMARY KEY ("ELL_Id");

--BLOCK
RECREATE TABLE "Circles"(
	"CIR_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "Circles" ADD CONSTRAINT "PK_Circles" PRIMARY KEY ("CIR_Id");

--BLOCK
RECREATE TABLE "Curved"(
	"CUR_Id" INTEGER NOT NULL,
	"CUR_Radius" numeric(18,2) NOT NULL
);

--BLOCK
ALTER TABLE "Curved" ADD CONSTRAINT "PK_Curved" PRIMARY KEY ("CUR_Id");


--BLOCK
RECREATE TABLE "Polygons"(
	"POL_Id" INTEGER NOT NULL,
	"POL_Angle" numeric(18,2) NOT NULL,
	"POL_Length" numeric(18,2) NOT NULL
);

--BLOCK
ALTER TABLE "Polygons" ADD CONSTRAINT "PK_Polygons" PRIMARY KEY ("POL_Id");

--BLOCK
RECREATE TABLE "Shapes"(
	"SHA_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"SHA_Name" VARCHAR(50) NOT NULL,
	"SHO_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "Shapes" ADD CONSTRAINT "PK_Shapes" PRIMARY KEY ("SHA_Id");


--BLOCK
RECREATE TABLE "ShapesTPH"(
	"SHA_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"SHA_Name" VARCHAR(50) NOT NULL,
	"SHA_Type" VARCHAR(50) NOT NULL,
	"SHA_Angle" numeric(18,2),
	"SHA_Length" numeric(18,2),
	"SHA_Radius" numeric(18,2),
	"SHA_Radius2" numeric(18,2),
	"SHO_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "ShapesTPH" ADD CONSTRAINT "PK_ShapesTPH" PRIMARY KEY ("SHA_Id");

--BLOCK
RECREATE TABLE "ShapeOptions"(
	"SHO_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"SHO_BackgroundColor" VARCHAR(50) NOT NULL,
	"SHO_OutlineColor" VARCHAR(50) NOT NULL
);

--BLOCK
ALTER TABLE "ShapeOptions" ADD CONSTRAINT "PK_ShapeOptions" PRIMARY KEY ("SHO_Id");


--BLOCK
RECREATE TABLE "Employees"(
	"EMP_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"EMP_FullName" VARCHAR(50) NOT NULL,
	"EMP_Email" VARCHAR(50) NOT NULL,
	"EMP_PhoneNumber" VARCHAR(50) NOT NULL,
	"DEP_Id" INTEGER NOT NULL
);

--BLOCK
ALTER TABLE "Employees" ADD CONSTRAINT "PK_Employees" PRIMARY KEY ("EMP_Id");

--BLOCK
RECREATE TABLE "Departments"(
	"DEP_Id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
	"DEP_Name" VARCHAR(50) NOT NULL,
	"COM_Id" VARCHAR(36) NOT NULL
);

--BLOCK
ALTER TABLE "Departments" ADD CONSTRAINT "PK_Departments" PRIMARY KEY ("DEP_Id");

--BLOCK
ALTER TABLE "Departments" ADD CONSTRAINT "UQ_Departments_Name" UNIQUE ("DEP_Name");

--BLOCK
RECREATE TABLE "Companies"(
	"COM_Id" VARCHAR(36) NOT NULL,
	"COM_Name" VARCHAR(50) NOT NULL,
	"COM_Logo" BLOB
);

--BLOCK
ALTER TABLE "Companies" ADD CONSTRAINT "PK_Companies" PRIMARY KEY ("COM_Id");

--BLOCK
ALTER TABLE "Companies" ADD CONSTRAINT "UQ_Companies_Name" UNIQUE ("COM_Name");

--BLOCK
ALTER TABLE "Addresses" ADD CONSTRAINT "FK_Addresses_Countries" FOREIGN KEY ("COU_Id") REFERENCES "Countries" ("COU_Id");
--BLOCK
ALTER TABLE "Addresses" ADD CONSTRAINT "FK_Addresses_Customers" FOREIGN KEY ("CUS_Id") REFERENCES "Customers" ("CUS_Id");
--BLOCK
ALTER TABLE "Invoices" ADD CONSTRAINT "FK_Invoices_Customers" FOREIGN KEY("CUS_Id") REFERENCES "Customers" ("CUS_Id");
--BLOCK
ALTER TABLE "InvoiceLines" ADD CONSTRAINT "FK_InvoiceLines_Invoices" FOREIGN KEY("INV_Id") REFERENCES "Invoices" ("INV_Id");
--BLOCK
ALTER TABLE "Shapes" ADD CONSTRAINT "FK_Shapes_ShapesOptions" FOREIGN KEY("SHO_Id") REFERENCES "ShapeOptions" ("SHO_Id");
--BLOCK
ALTER TABLE "ShapesTPH" ADD CONSTRAINT "FK_ShapesTPH_ShapesOptions" FOREIGN KEY("SHO_Id") REFERENCES "ShapeOptions" ("SHO_Id");
--BLOCK
ALTER TABLE "Polygons" ADD CONSTRAINT "FK_Polygons_Shapes" FOREIGN KEY("POL_Id") REFERENCES "Shapes" ("SHA_Id");
--BLOCK
ALTER TABLE "Curved" ADD CONSTRAINT "FK_Curved_Shapes" FOREIGN KEY("CUR_Id") REFERENCES "Shapes" ("SHA_Id");
--BLOCK
ALTER TABLE "Circles" ADD CONSTRAINT "FK__Circles_Curved" FOREIGN KEY("CIR_Id") REFERENCES "Curved" ("CUR_Id");
--BLOCK
ALTER TABLE "Ellipses" ADD CONSTRAINT "FK__Ellipses_Curved" FOREIGN KEY("ELL_Id") REFERENCES "Curved" ("CUR_Id");
--BLOCK
ALTER TABLE "EllipsesKit" ADD CONSTRAINT "FK__EllipsesKit_Ellipses1" FOREIGN KEY("ELL_Id1") REFERENCES "Ellipses" ("ELL_Id");
--BLOCK
ALTER TABLE "EllipsesKit" ADD CONSTRAINT "FK__EllipsesKit_Ellipses2" FOREIGN KEY("ELL_Id2") REFERENCES "Ellipses" ("ELL_Id");
--BLOCK
ALTER TABLE "EllipsesKit" ADD CONSTRAINT "FK__EllipsesKit_Ellipses3" FOREIGN KEY("ELL_Id3") REFERENCES "Ellipses" ("ELL_Id");

--BLOCK
ALTER TABLE "Departments" ADD CONSTRAINT "FK_Departments_Companies" FOREIGN KEY("COM_Id") REFERENCES "Companies" ("COM_Id");
--BLOCK
ALTER TABLE "Employees" ADD CONSTRAINT "FK_Employees_Departments" FOREIGN KEY("DEP_Id") REFERENCES "Departments" ("DEP_Id");

--BLOCK
RECREATE TABLE "BlackList"(
	"BLL_Year" INTEGER NOT NULL,
	"BLL_Email" VARCHAR(50) NOT NULL,
	"BLL_Amount" NUMERIC(18,4) NOT NULL
);

--BLOCK
ALTER TABLE "BlackList" ADD CONSTRAINT "PK_BlackList" PRIMARY KEY ("BLL_Year", "BLL_Email");


--BLOCK
RECREATE FUNCTION "df_GetAge"(
  "birthDate" DATE,
  "deathDate" DATE)
RETURNS INTEGER
AS
BEGIN  
    RETURN DATEdiff (year, "birthDate", COALESCE("deathDate", cast('NOW' as DATE)));
END

--BLOCK
CREATE PROCEDURE "sp_AddSupplier"(
  "name" VARCHAR(50),
  "taxCode" VARCHAR(50),
  "email" VARCHAR(50))
AS
BEGIN
  INSERT INTO "Suppliers"("SUP_Name", "SUP_Email", "SUP_TaxCode") VALUES(:"name", :"taxCode", :"email");
END

--BLOCK
CREATE PROCEDURE "sp_GetInvoices"(
  "pageNumber" INTEGER,
  "pageSize" INTEGER)
RETURNS(
  "Id" INTEGER,
  "Number" VARCHAR(50),
  "Date" DATE,
  "TaxCode" VARCHAR(50),
  "Email" VARCHAR(50))
AS
DECLARE "offset" INTEGER = 0;
BEGIN
	"offset" = (:"pageNumber" - 1) * "pageSize";
	FOR SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" as "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
		FROM "Invoices" "i"
			INNER JOIN "Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
		ORDER BY "i"."CUS_Id"
        OFFSET :"offset" ROWS FETCH NEXT :"pageSize" ROWS ONLY
        INTO :"Id", :"Number", :"Date", :"TaxCode", :"Email"
	DO
	BEGIN
		SUSPEND;
	END
END

--BLOCK
CREATE PROCEDURE "sp_GetCountAddresses"(
  "pageNumber" INTEGER,
  "pageSize" INTEGER)
RETURNS(
  "CustomerId" INTEGER,
  "CustomerEmail" VARCHAR(50),
  "AddressesCount" INTEGER)
AS
DECLARE "offset" INTEGER = 0;
BEGIN
	"offset" = (:"pageNumber" - 1) * "pageSize";
	FOR SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
		FROM "Addresses" "a"
			INNER JOIN "Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
		GROUP BY "a"."CUS_Id", "c"."CUS_Email"
		ORDER BY "a"."CUS_Id"
        OFFSET :"offset" ROWS FETCH NEXT :"pageSize" ROWS ONLY
        INTO :"CustomerId", :"CustomerEmail", :"AddressesCount"
	DO
	BEGIN
		SUSPEND;
	END
END

--BLOCK
CREATE PROCEDURE "sp_GetInvoice"(
	"id" INTEGER)
RETURNS(
  "Id" INTEGER,
  "Number" VARCHAR(50),
  "Date" DATE,
  "TaxCode" VARCHAR(50),
  "Email" VARCHAR(50))
AS
BEGIN
	FOR SELECT "INV_Id" AS "Id", "INV_Number" AS "Number", "INV_Date" as "Date", "CUS_TaxCode" AS "TaxCode", "CUS_Email" AS "Email"
		FROM "Invoices" "i"
			INNER JOIN "Customers" "c" ON "c"."CUS_Id" = "i"."CUS_Id"
		WHERE "INV_Id" = :"id"
        INTO :"Id", :"Number", :"Date", :"TaxCode", :"Email"
	DO
	BEGIN
		SUSPEND;
	END
END

--BLOCK
CREATE PROCEDURE "sp_GetCountAddress"(
	"id" INTEGER)
RETURNS(
  "CustomerId" INTEGER,
  "CustomerEmail" VARCHAR(50),
  "AddressesCount" INTEGER)
AS
BEGIN
	FOR SELECT "a"."CUS_Id" AS "CustomerId", "c"."CUS_Email" AS "CustomerEmail", COUNT(*) AS "AddressesCount"
		FROM "Addresses" "a"
			INNER JOIN "Customers" "c" ON "c"."CUS_Id" = "a"."CUS_Id"
		WHERE "a"."CUS_Id" = :"id"
		GROUP BY "a"."CUS_Id", "c"."CUS_Email"	
        INTO :"CustomerId", :"CustomerEmail", :"AddressesCount"
	DO
	BEGIN
		SUSPEND;
	END
END

--BLOCK
CREATE PROCEDURE "sp_GetInvoicesAmount"()
RETURNS(
  "Amount" NUMERIC(18,4))
AS
BEGIN
	FOR SELECT SUM("ILI_Amount")
		FROM "InvoiceLines"
        INTO :"Amount"
	DO
	BEGIN
		SUSPEND;
	END
END

